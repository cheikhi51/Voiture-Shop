version: '3.8'

services:
  # MariaDB
  mariadb:
    image: mariadb:10.11
    container_name: mariadb-springboot
    environment:
      MYSQL_ROOT_PASSWORD: ${SPRING_DATASOURCE_PASSWORD:-hamadach2003}
      MYSQL_DATABASE: springboot
      MYSQL_USER: ${SPRING_SECURITY_USER_NAME:-admin}
      MYSQL_PASSWORD: ${SPRING_SECURITY_USER_PASSWORD:-1234}
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend Spring Boot
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/springboot
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-hamadach2003}
      - SPRING_SECURITY_USER_NAME=${SPRING_SECURITY_USER_NAME:-admin}
      - SPRING_SECURITY_USER_PASSWORD=${SPRING_SECURITY_USER_PASSWORD:-1234}
      - SPRING_APPLICATION_NAME=${SPRING_APPLICATION_NAME:-SpringDataRest}
      - SERVER_PORT=${SERVER_PORT:-8081}
      - MANAGEMENT_SERVER_PORT=${MANAGEMENT_SERVER_PORT:-8082}
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - app-network
    # Retirer le healthcheck qui nécessite curl (problème Alpine)
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8081/api/voitures"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Frontend React
  frontend:
    build:
      context: ../reactSpringApp
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    depends_on:
      - backend

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  mariadb_data:
  grafana_data:

networks:
  app-network:
    driver: bridge